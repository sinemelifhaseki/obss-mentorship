spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/mentorship?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/mentorship?serverTimezone=UTC
spring.datasource.username=springuser
spring.datasource.password=ThePassword

#`hibernate_sequence' doesn't exist
spring.jpa.hibernate.use-new-id-generator-mappings=false

# drop n create table, good for testing, comment this in production
#spring.jpa.hibernate.ddl-auto=create

#ldif
spring.ldap.embedded.ldif=classpath:test-server.ldif
spring.ldap.embedded.base-dn=dc=obssmentorship,dc=com
spring.ldap.embedded.port=8389

#google oauth
spring.security.oauth2.client.registration.google.client-id=238350752785-59s3ionuvh1ap6kvgadfajcknhmjlvus.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=z1DYZHKvTqUTX_-onss8HdoE
security.oauth2.client.accessTokenUri  =  https://www.googleapis.com/oauth2/v3/token
security.oauth2.client.userAuthorizationUri  =  https://accounts.google.com/o/oauth2/auth
security.oauth2.client.tokenName = oauth_token
security.oauth2.client.authenticationScheme = query
security.oauth2.client.clientAuthenticationScheme = form
security.oauth2.client.scope = profile email

#linkedin
spring.security.oauth2.client.registration.linkedin.client-id=77668qj90qju5b
spring.security.oauth2.client.registration.linkedin.client-secret=xJm98zvHL3HAhROC
spring.security.oauth2.client.registration.linkedin.scope=r_emailaddress,r_liteprofile
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.redirect-uri=http://localhost:8080
spring.security.oauth2.client.registration.linkedin.client-name = LinkedIn
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.registration.linkedin.client-authentication-method = post
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute = id
spring.security.oauth2.client.provider.linkedin.user-info-authentication-method= form

#solr
spring.data.solr.host=http://localhost:8983/solr/

#mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=obssmentorship@gmail.com
spring.mail.password=ObssMent.1

#mail properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# TLS, port 587
spring.mail.properties.mail.smtp.starttls.enable=true

#facebook
spring.social.facebook.appId=729657691220516
spring.social.facebook.appSecret=def026e4613c32dd0aa23a1fa17c0cfe

